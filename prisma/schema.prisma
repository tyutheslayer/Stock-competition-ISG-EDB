//prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// =========================
// Modèles existants
// =========================

model User {
  id               String      @id @default(cuid())
  name             String?
  email            String      @unique
  password         String
  image            String?
  emailVerified    DateTime?
  createdAt        DateTime    @default(now())
  cash             Float       @default(100000)
  startingCash     Float       @default(100000)
  role             Role        @default(USER)
  promo            String?
  lastNameChangeAt DateTime?
  orders           Order[]
  positions        Position[]
  watchlist        Watchlist[]
  rsvps            Rsvp[]

  plusSubscription PlusSubscription?
}

model Position {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  name      String?
  quantity  Float
  avgPrice  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, symbol])
}

model Order {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  side      String   @db.Text
  quantity  Float    @map("qty")
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feeEUR    Float?
}

enum Role {
  USER
  ADMIN
}

model Watchlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  name      String?
  rank      Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([userId, symbol])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

// -------- Global settings (frais de trading) --------
// Table physique: "AppSettings" (colonne "feeBps").
// Ligne unique id=1. tradingFeeBps en basis points (ex: 25 = 0,25%).
model Settings {
  id            Int      @id
  tradingFeeBps Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("AppSettings") // on garde le nom de table AppSettings
}

// -------------------- EVENTS --------------------

model Event {
  id          String     @id @default(cuid())
  title       String
  description String?
  startsAt    DateTime
  endsAt      DateTime?
  type        EventType
  visibility  Visibility @default(PUBLIC)
  location    String?
  isOpenEnded Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  rsvps Rsvp[]

  @@unique([title, startsAt])
  @@index([startsAt])
  @@index([type])
  @@index([visibility])
}

model Rsvp {
  id String @id @default(cuid())

  // relation vers User par email (User.email est unique)
  userEmail String
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  // relation vers Event par id
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  status    String   @default("GOING")
  createdAt DateTime @default(now())

  @@unique([userEmail, eventId])
}

enum EventType {
  MINI_COURSE
  PLUS_SESSION
  EDB_NIGHT
  PARTNER_TALK
  MASTERMIND
  ROADTRIP
  OTHER
}

enum Visibility {
  PUBLIC
  PLUS
}

model FreeSignup {
  id          String    @id @default(cuid())
  email       String    @unique
  createdAt   DateTime  @default(now())
  confirmedAt DateTime?
  source      String?
  ip          String?
  userAgent   String?
}

model SumupCreds {
  id           Int       @id @default(1)
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  updatedAt    DateTime  @updatedAt
}

model PlusSubscription {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  status     String   @default("pending") // pending|active|canceled
  checkoutId String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TpslRule {
  id           String   @id @default(cuid())
  userId       String
  positionSym  String
  baseSymbol   String
  kind         String   @default("LEV")
  side         String
  quantity     Float?
  qtyMode      String   @default("ALL")
  tp           Float?
  sl           Float?
  isArmed      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, positionSym, isArmed])
}

model TpslTrigger {
  id           String   @id @default(cuid())
  ruleId       String
  userId       String
  positionSym  String
  priceEUR     Float
  reason       String
  closedQty    Float
  createdAt    DateTime @default(now())

  @@index([ruleId, createdAt])
}

model PlusSheet {
  id        String   @id @default(cuid())
  title     String
  filename  String   // nom du fichier physique
  createdAt DateTime @default(now())
  uploadedBy String?

  @@index([createdAt])
}

model Quiz {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  description   String?
  visibility    QuizVisibility @default(PUBLIC) // PUBLIC | PLUS
  topic         String?                       // ex: "Options", "Fiscalité"
  difficulty    QuizDifficulty @default(EASY) // EASY | MEDIUM | HARD
  timeLimitSec  Int?                           // ex: 600
  isRandomOrder Boolean       @default(true)
  questions     Question[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum QuizVisibility { PUBLIC PLUS }
enum QuizDifficulty { EASY MEDIUM HARD }

model Question {
  id         String   @id @default(cuid())
  quizId     String
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  kind       QuestionKind @default(SINGLE) // SINGLE | MULTI
  text       String
  explanation String?                       // feedback après réponse
  // on stocke la/les bonnes réponses via Choice.isCorrect
  choices    Choice[]
  orderIndex Int       @default(0)
}

enum QuestionKind { SINGLE MULTI }

model Choice {
  id         String  @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  isCorrect  Boolean @default(false)
}

model QuizAttempt {
  id           String   @id @default(cuid())
  quizId       String
  quiz         Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userId       String
  startedAt    DateTime @default(now())
  finishedAt   DateTime?
  score        Int      @default(0)   // nombre de points
  maxScore     Int      @default(0)
  percent      Float    @default(0)
  answers      QuizAnswer[]

  @@index([userId, quizId])
}

model QuizAnswer {
  id          String   @id @default(cuid())
  attemptId   String
  attempt     QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  questionId  String
  selectedIds String[] // tableau d’id de Choice
  isCorrect   Boolean  @default(false)
}
