generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String          @unique
  password         String
  image            String?
  emailVerified    DateTime?
  createdAt        DateTime        @default(now())
  cash             Float           @default(100000)
  startingCash     Float           @default(100000)
  role             Role            @default(USER)
  school           String?
  promo            String?
  lastNameChangeAt DateTime?
  orders           Order[]
  positions        Position[]
  watchlist   Watchlist[]
}

model Position {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  name      String?
  quantity  Float
  avgPrice  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   // <— AJOUT

  @@unique([userId, symbol])
}


model Order {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  side      String   @db.Text
  quantity  Float    @map("qty")
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   // <— AJOUT si la colonne existe en DB
}

enum Role {
  USER
  ADMIN
}


model Watchlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  name      String?
  rank      Int      @default(0)      
  createdAt DateTime @default(now())

  @@unique([userId, symbol])
}
/// --- MIGRATION NOTE ---
/// Le champ 'rank' permet d'ordonner les favoris par utilisateur.
/// On l'initialise à 0 puis on set des valeurs croissantes.

