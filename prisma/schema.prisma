generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// =========================
//    Modèles existants
// =========================

model User {
  id               String      @id @default(cuid())
  name             String?
  email            String      @unique
  password         String
  image            String?
  emailVerified    DateTime?
  createdAt        DateTime    @default(now())
  cash             Float       @default(100000)
  startingCash     Float       @default(100000)
  role             Role        @default(USER)
  promo            String?
  lastNameChangeAt DateTime?
  orders           Order[]
  positions        Position[]
  watchlist        Watchlist[]
  rsvps            Rsvp[]
}

model Position {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  name      String?
  quantity  Float
  avgPrice  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, symbol])
}

model Order {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  side      String   @db.Text
  quantity  Float    @map("qty")
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Watchlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  symbol    String
  name      String?
  rank      Int      @default(0)
  createdAt DateTime @default(now())

  @@unique([userId, symbol])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

// -------- Global settings (frais de trading) --------
// Ligne unique id=1. tradingFeeBps en basis points (ex: 25 = 0,25%).

model Settings {
  id            Int      @id
  tradingFeeBps Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// =========================
//    Nouveaux modèles: Événements & RSVP
// =========================

model Event {
  id           String       @id @default(cuid())
  title        String
  type         EventType
  visibility   Visibility   @default(ALL)
  description  String?
  location     String?
  startsAt     DateTime
  endsAt       DateTime
  isOpenEnded  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  rsvps        Rsvp[]

  @@index([startsAt])
  @@index([type, startsAt])
  @@unique([title, startsAt])
}

model Rsvp {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  status    RsvpStatus @default(GOING)
  note      String?
  createdAt DateTime   @default(now())

  @@unique([userId, eventId])
}

enum EventType {
  MINI_COURSE
  PLUS_SESSION
  EDB_NIGHT
  PARTNER_TALK
  MASTERMIND
  ROADTRIP
  OTHER
}

enum Visibility {
  ALL
  PLUS
}

enum RsvpStatus {
  GOING
  INTERESTED
  CANNOT_GO
}